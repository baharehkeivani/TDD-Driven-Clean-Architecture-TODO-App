// Mocks generated by Mockito 5.4.6 from annotations
// in todo_app/test/features/todo/data/mock/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:either_dart/either.dart' as _i7;
import 'package:hive_flutter/hive_flutter.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:todo_app/core/state_manager/errors/failure.dart' as _i8;
import 'package:todo_app/features/todo/data/datasources/tasks_datesource.dart'
    as _i2;
import 'package:todo_app/features/todo/domain/entities/task.dart' as _i4;
import 'package:todo_app/features/todo/domain/repositories/tasks_repository.dart'
    as _i6;
import 'package:todo_app/features/todo/domain/usecases/tasks_service.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TasksDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksDatasource extends _i1.Mock implements _i2.TasksDatasource {
  @override
  set box(_i3.Box<_i4.Task>? _box) => super.noSuchMethod(
    Invocation.setter(#box, _box),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i4.Task>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i5.Future<List<_i4.Task>>.value(<_i4.Task>[]),
            returnValueForMissingStub: _i5.Future<List<_i4.Task>>.value(
              <_i4.Task>[],
            ),
          )
          as _i5.Future<List<_i4.Task>>);

  @override
  _i5.Future<_i4.Task?> add(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#add, [task]),
            returnValue: _i5.Future<_i4.Task?>.value(),
            returnValueForMissingStub: _i5.Future<_i4.Task?>.value(),
          )
          as _i5.Future<_i4.Task?>);

  @override
  _i5.Future<void> remove(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i4.Task?> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i5.Future<_i4.Task?>.value(),
            returnValueForMissingStub: _i5.Future<_i4.Task?>.value(),
          )
          as _i5.Future<_i4.Task?>);

  @override
  _i5.Future<void> edit(_i4.Task? newTask, bool Function(_i4.Task)? where) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [newTask, where]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [TasksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepository extends _i1.Mock implements _i6.TasksRepository {
  @override
  _i5.Future<_i7.Either<_i8.Failure, _i4.Task>> addTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [task]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                this,
                Invocation.method(#addTask, [task]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                    this,
                    Invocation.method(#addTask, [task]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, void>> removeTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeTask, [id]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, void>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, void>>(
                this,
                Invocation.method(#removeTask, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, void>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, void>>(
                    this,
                    Invocation.method(#removeTask, [id]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, void>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, _i4.Task>> getTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTask, [id]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                this,
                Invocation.method(#getTask, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                    this,
                    Invocation.method(#getTask, [id]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>> getTasksByDate(
    DateTime? date,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByDate, [date]),
            returnValue:
                _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, List<_i4.Task>>>(
                    this,
                    Invocation.method(#getTasksByDate, [date]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, List<_i4.Task>>>(
                    this,
                    Invocation.method(#getTasksByDate, [date]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, bool>> toggleTaskState(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskState, [task]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, bool>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, bool>>(
                this,
                Invocation.method(#toggleTaskState, [task]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, bool>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, bool>>(
                    this,
                    Invocation.method(#toggleTaskState, [task]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, bool>>);
}

/// A class which mocks [TasksService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksService extends _i1.Mock implements _i10.TasksService {
  @override
  _i5.Future<_i7.Either<_i8.Failure, _i4.Task>> addTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [task]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                this,
                Invocation.method(#addTask, [task]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                    this,
                    Invocation.method(#addTask, [task]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, void>> removeTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeTask, [id]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, void>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, void>>(
                this,
                Invocation.method(#removeTask, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, void>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, void>>(
                    this,
                    Invocation.method(#removeTask, [id]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, void>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, _i4.Task>> getTask(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTask, [id]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                this,
                Invocation.method(#getTask, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, _i4.Task>>(
                    this,
                    Invocation.method(#getTask, [id]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, _i4.Task>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>> getTasksByDate(
    DateTime? date,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByDate, [date]),
            returnValue:
                _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, List<_i4.Task>>>(
                    this,
                    Invocation.method(#getTasksByDate, [date]),
                  ),
                ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, List<_i4.Task>>>(
                    this,
                    Invocation.method(#getTasksByDate, [date]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, List<_i4.Task>>>);

  @override
  _i5.Future<_i7.Either<_i8.Failure, bool>> toggleTaskState(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskState, [task]),
            returnValue: _i5.Future<_i7.Either<_i8.Failure, bool>>.value(
              _i9.dummyValue<_i7.Either<_i8.Failure, bool>>(
                this,
                Invocation.method(#toggleTaskState, [task]),
              ),
            ),
            returnValueForMissingStub:
                _i5.Future<_i7.Either<_i8.Failure, bool>>.value(
                  _i9.dummyValue<_i7.Either<_i8.Failure, bool>>(
                    this,
                    Invocation.method(#toggleTaskState, [task]),
                  ),
                ),
          )
          as _i5.Future<_i7.Either<_i8.Failure, bool>>);
}
